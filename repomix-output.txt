This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    api/
      analyze/
        route.ts
    globals.css
    layout.tsx
    page.tsx
  components/
    OmissionDetector.tsx
  services/
    openai-service.ts
  types/
    index.ts
.gitignore
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
README.md
tsconfig.json

================================================================
Files
================================================================

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: src/app/api/analyze/route.ts
================
import { detectOmissions } from '@/services/openai-service';
import { NextRequest, NextResponse } from 'next/server';
import { AnalysisRequest } from '@/types';

export async function POST(request: NextRequest) {
  try {
    const { transcript, hpi } = await request.json() as AnalysisRequest;
    
    if (!transcript || !hpi) {
      return NextResponse.json(
        { error: 'Transcript and HPI are required' },
        { status: 400 }
      );
    }
    
    const analysis = await detectOmissions(transcript, hpi);
    return NextResponse.json(analysis);
  } catch (error) {
    console.error('Analysis error:', error);
    return NextResponse.json(
      { error: 'Error analyzing documents' },
      { status: 500 }
    );
  }
}

================
File: src/app/globals.css
================
@import "tailwindcss";

@theme {
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}

================
File: src/app/layout.tsx
================
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}

================
File: src/app/page.tsx
================
import OmissionDetector from '@/components/OmissionDetector';

export default function Home() {
  return (
    <main className="min-h-screen bg-gray-100 p-4">
      <OmissionDetector />
    </main>
  );
}

================
File: src/components/OmissionDetector.tsx
================
'use client';

import React, { useState } from 'react';
import { AnalysisResult, Omission } from '@/types';

// Improved utility function to get severity color classes
function getSeverityColorClasses(severity: Omission['severity']): string {
  switch (severity) {
    case 'Critical': return 'bg-red-100 text-red-800 border border-red-200';
    case 'Major': return 'bg-orange-100 text-orange-800 border border-orange-200';
    case 'Moderate': return 'bg-yellow-100 text-yellow-800 border border-yellow-200';
    case 'Minor': return 'bg-blue-100 text-blue-800 border border-blue-200';
    default: return 'bg-gray-100 text-gray-800 border border-gray-200';
  }
}

export default function OmissionDetector() {
  const [transcript, setTranscript] = useState<string>('');
  const [hpi, setHpi] = useState<string>('');
  const [result, setResult] = useState<AnalysisResult | null>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [activeTab, setActiveTab] = useState<'input' | 'results'>('input');

  const analyzeOmissions = async () => {
    setLoading(true);
    
    try {
      const response = await fetch('/api/analyze', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ transcript, hpi }),
      });
      
      if (!response.ok) {
        throw new Error('Analysis failed');
      }
      
      const resultData = await response.json() as AnalysisResult;
      setResult(resultData);
      setActiveTab('results');
    } catch (error) {
      console.error('Error:', error);
      alert('Error analyzing documents. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const resetForm = () => {
    setTranscript('');
    setHpi('');
    setResult(null);
    setActiveTab('input');
  };

  return (
    <div className="flex flex-col w-full max-w-4xl mx-auto p-4 space-y-4">
      {/* Main Card */}
      <div className="bg-white rounded-lg shadow-md overflow-hidden">
        {/* Header */}
        <div className="bg-slate-50 p-6 border-b">
          <h1 className="text-2xl font-bold text-gray-800">HPI Omission Detector</h1>
          <p className="text-gray-500 mt-1">Detect omissions in HPI documentation using LLM-powered analysis</p>
        </div>

        {/* Tab navigation */}
        <div className="border-b">
          <div className="flex">
            <button 
              className={`px-6 py-3 font-medium text-base transition-colors ${activeTab === 'input' ? 'border-b-2 border-blue-500 text-blue-600' : 'text-gray-500 hover:text-gray-700 hover:bg-gray-50'}`}
              onClick={() => setActiveTab('input')}
            >
              Input
            </button>
            <button 
              className={`px-6 py-3 font-medium text-base transition-colors ${activeTab === 'results' ? 'border-b-2 border-blue-500 text-blue-600' : 'text-gray-500'}`}
              onClick={() => result && setActiveTab('results')}
              disabled={!result}
            >
              Results
            </button>
          </div>
        </div>

        {/* Content */}
        {activeTab === 'input' ? (
          <>
            <div className="p-6 space-y-6">
              <div>
                <h3 className="text-lg font-medium mb-2 text-gray-800">Transcript</h3>
                <textarea 
                  placeholder="Paste the clinical encounter transcript here..." 
                  value={transcript}
                  onChange={(e) => setTranscript(e.target.value)}
                  rows={8}
                  className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent shadow-sm font-mono text-gray-700"
                />
              </div>

              <div>
                <h3 className="text-lg font-medium mb-2 text-gray-800">History of Present Illness (HPI)</h3>
                <textarea 
                  placeholder="Paste the generated HPI here..." 
                  value={hpi}
                  onChange={(e) => setHpi(e.target.value)}
                  rows={8}
                  className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent shadow-sm font-mono text-gray-700"
                />
              </div>
            </div>

            <div className="p-4 bg-gray-50 flex justify-between border-t">
              <button 
                onClick={resetForm}
                className="px-4 py-2 border rounded-md hover:bg-gray-100 transition-colors font-medium text-gray-600"
              >
                Reset
              </button>
              <button 
                onClick={analyzeOmissions}
                disabled={!transcript || !hpi || loading}
                className={`px-6 py-2 rounded-md text-white font-medium relative transition-colors ${!transcript || !hpi || loading ? 'bg-blue-300 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700'}`}
              >
                {loading ? (
                  <>
                    <span className="opacity-0">Analyze Omissions</span>
                    <div className="absolute inset-0 flex items-center justify-center">
                      <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
                      <span>Analyzing...</span>
                    </div>
                  </>
                ) : (
                  <span>Analyze Omissions</span>
                )}
              </button>
            </div>
          </>
        ) : (
          result && (
            <>
              <div className="p-6 space-y-6">
                {/* Summary section with improved styling */}
                <div>
                  <h3 className="text-xl font-medium mb-3 text-gray-800 border-b pb-2">Summary of Omission Analysis</h3>
                  <p className="text-gray-700 text-base leading-relaxed bg-white p-4 rounded-lg shadow-sm">{result.summary}</p>
                </div>

                {/* Detailed analysis with better spacing and contrast */}
                <div>
                  <h3 className="text-xl font-medium mb-4 text-gray-800 border-b pb-2">Detailed Omission Analysis</h3>
                  {result.omissions.length > 0 ? (
                    result.omissions.map((omission, index) => (
                      <div key={index} className="border rounded-lg p-5 mb-5 bg-white shadow-sm hover:shadow-md transition-shadow">
                        <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-2 mb-3">
                          <h4 className="font-medium text-lg text-gray-800">{omission.type}</h4>
                          <span className={`${getSeverityColorClasses(omission.severity)} px-3 py-1 rounded-full text-sm font-medium inline-block text-center`}>
                            {omission.severity}
                          </span>
                        </div>
                        <div className="space-y-3 mt-3">
                          <div>
                            <span className="font-medium text-gray-700">Description:</span> 
                            <p className="mt-1 text-gray-700">{omission.description}</p>
                          </div>
                          <div className="bg-gray-50 p-4 rounded-lg border-l-4 border-gray-300 my-3">
                            <span className="font-medium text-gray-700">Evidence:</span> 
                            <p className="mt-1 text-gray-600 italic">"{omission.evidence}"</p>
                          </div>
                          <div>
                            <span className="font-medium text-gray-700">Recommendation:</span> 
                            <p className="mt-1 text-gray-700">{omission.recommendation}</p>
                          </div>
                        </div>
                      </div>
                    ))
                  ) : (
                    <div className="p-5 border rounded-lg bg-green-50 text-green-800">
                      No omissions detected. The HPI appears complete.
                    </div>
                  )}
                </div>

                {/* Overall assessment with better styling */}
                <div>
                  <h3 className="text-xl font-medium mb-3 text-gray-800 border-b pb-2">Overall Assessment</h3>
                  <p className="text-gray-700 bg-white p-4 rounded-lg shadow-sm">{result.assessment}</p>
                </div>

                {/* Analysis summary with improved card styling */}
                {result.omissions.length > 0 && (
                  <div className="border-t pt-4">
                    <h3 className="text-lg font-medium mb-4 text-gray-800">Analysis Summary</h3>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                      <div className="bg-white p-4 rounded-lg shadow-sm text-center border border-gray-100">
                        <div className="text-2xl font-bold text-gray-800">{result.omissions.length}</div>
                        <div className="text-sm text-gray-500">Total Omissions</div>
                      </div>
                      <div className="bg-white p-4 rounded-lg shadow-sm text-center border-l-4 border-red-500">
                        <div className="text-2xl font-bold text-red-700">
                          {result.omissions.filter(o => o.severity === "Critical").length}
                        </div>
                        <div className="text-sm text-gray-500">Critical</div>
                      </div>
                      <div className="bg-white p-4 rounded-lg shadow-sm text-center border-l-4 border-orange-500">
                        <div className="text-2xl font-bold text-orange-700">
                          {result.omissions.filter(o => o.severity === "Major").length}
                        </div>
                        <div className="text-sm text-gray-500">Major</div>
                      </div>
                      <div className="bg-white p-4 rounded-lg shadow-sm text-center border-l-4 border-yellow-500">
                        <div className="text-2xl font-bold text-yellow-700">
                          {result.omissions.filter(o => o.severity === "Moderate").length + 
                          result.omissions.filter(o => o.severity === "Minor").length}
                        </div>
                        <div className="text-sm text-gray-500">Moderate/Minor</div>
                      </div>
                    </div>
                  </div>
                )}
              </div>

              <div className="p-4 bg-gray-50 flex justify-between border-t">
                <button 
                  onClick={() => setActiveTab('input')}
                  className="px-4 py-2 border rounded-md hover:bg-gray-100 transition-colors font-medium text-gray-600"
                >
                  Back to Input
                </button>
                <button 
                  onClick={resetForm}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors font-medium"
                >
                  Start New Analysis
                </button>
              </div>
            </>
          )
        )}
      </div>
      
      {/* Info Card */}
      <div className="bg-blue-50 rounded-lg p-6 shadow-md">
        <h3 className="text-lg font-medium mb-2 text-gray-800">About This Omission Detector</h3>
        <p className="text-gray-700 leading-relaxed">
          This application uses OpenAI's GPT-4 to analyze clinical documentation and
          identify potential omissions between transcripts and HPIs.
        </p>
        
        <div className="mt-4 p-4 bg-white rounded-lg border border-blue-200 shadow-sm">
          <h4 className="font-medium mb-2 flex items-center text-gray-800">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-blue-600 mr-2" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
            </svg>
            Usage Instructions
          </h4>
          <ol className="text-gray-700 text-sm space-y-1 ml-6 list-decimal">
            <li className="mb-1">Paste a clinical transcript in the first box</li>
            <li className="mb-1">Paste the corresponding HPI in the second box</li>
            <li className="mb-1">Click "Analyze Omissions" to detect gaps and inconsistencies</li>
            <li>Review the detailed analysis with evidence from the transcript</li>
          </ol>
        </div>
      </div>
    </div>
  );
}

================
File: src/services/openai-service.ts
================
import OpenAI from 'openai';
import { AnalysisResult } from '@/types';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function detectOmissions(transcript: string, hpi: string): Promise<AnalysisResult> {
  const response = await openai.chat.completions.create({
    model: "gpt-4-turbo",
    messages: [
      {
        role: "system",
        content: `You are an expert clinical documentation specialist focused on identifying clinically significant omissions in medical documentation. Your task is to compare a clinical encounter transcript with a generated History of Present Illness (HPI) and identify important clinical information that appears in the transcript but is missing from the HPI.

FOCUS AREAS: Based on actual clinician feedback, prioritize these specific types of omissions:

1. RECENT MEDICAL EVENTS: Emergency department visits, hospitalizations, or other significant healthcare encounters mentioned in the transcript but not captured in the HPI. These are often critical omissions.

2. KEY SYMPTOMS: Symptoms discussed at length during the encounter (especially shortness of breath, pain, fatigue) that are completely missing from or contradicted in the HPI.

3. SYMPTOM CHARACTERISTICS: Details about what makes symptoms better or worse, timing of symptoms, specific locations, or other modifiers that help characterize symptoms.

4. MEDICATION INFORMATION: Missing details about medications discussed, especially recent changes, side effects, or specific medications like inhalers that may be relevant to current symptoms.

5. RED FLAG SYMPTOMS: Any "red flag" symptoms that were specifically asked about or mentioned (like chest pain) but not documented in the HPI.

6. PROCEDURAL ELEMENTS: Critical procedural information like interpreter services, if mentioned in the transcript.

IMPORTANT GUIDELINES:
- Focus ONLY on information present in the transcript but missing from the HPI
- Prioritize clinical information that would impact medical decision-making
- Look specifically for details clinicians highlighted as important in feedback
- Identify specific, precise information rather than general categories
- Include direct quotes from the transcript as evidence
- For each omission, explain exactly what is missing and why it matters clinically

IMPORTANT: Use ONLY these exact severity classifications:
- "Critical" (capitalize only the first letter)
- "Major" (capitalize only the first letter)
- "Moderate" (capitalize only the first letter)
- "Minor" (capitalize only the first letter)

SEVERITY DEFINITIONS:
- Critical: Recent medical events (ER visits), major symptoms entirely missing, or red flag symptoms not documented
- Major: Important clinical details about symptoms or medications that significantly impact assessment
- Moderate: Relevant but less critical clinical information
- Minor: Supplementary information that would enhance the HPI but is not essential

Format your response as JSON:
{
  "summary": "Brief focus on the most important clinical omissions",
  "omissions": [
    {
      "type": "Omission category from the focus areas list",
      "severity": "Critical|Major|Moderate|Minor",
      "description": "Specific information missing from the HPI",
      "evidence": "Direct quote from transcript showing the omitted information",
      "recommendation": "How this should be documented in the HPI"
    }
  ],
  "assessment": "Assessment of clinical impact of these omissions"
}`
      },
      {
        role: "user",
        content: `Clinical Transcript:\n${transcript}\n\nGenerated HPI:\n${hpi}`
      }
    ],
    temperature: 0.1,
    max_tokens: 2000,
    response_format: { type: "json_object" }
  });

  try {
    const parsedResponse = JSON.parse(response.choices[0].message.content || '{}') as AnalysisResult;
    return parsedResponse;
  } catch (error) {
    console.error("Error parsing JSON response:", error);
    return {
      summary: "Error analyzing the documents",
      omissions: [],
      assessment: "Please try again"
    };
  }
}

================
File: src/types/index.ts
================
export interface Omission {
    type: string;
    severity: 'Critical' | 'Major' | 'Moderate' | 'Minor';
    description: string;
    evidence: string;
    recommendation: string;
  }
  
  export interface AnalysisResult {
    summary: string;
    omissions: Omission[];
    assessment: string;
  }
  
  export interface AnalysisRequest {
    transcript: string;
    hpi: string;
  }

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: package.json
================
{
  "name": "hpi-omission-detector",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "15.2.0",
    "openai": "^4.86.1",
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.2.0",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================================
End of Codebase
================================================================
